/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
 * @param {string} formType - –¢–∏–ø —Ñ–æ—Ä–º—ã (modal, contact)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendToTelegram = async (formData, formType) => {
    try {
        const BOT_TOKEN = 'YOUR_BOT_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        const CHAT_ID = 'YOUR_CHAT_ID'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
        const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
        let messageText = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!\n\n`;
        messageText += `üë§ –ò–º—è: ${formData.name}\n`;
        messageText += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n`;
        
        if (formType === 'modal' && formData.service) {
            messageText += `üõéÔ∏è –£—Å–ª—É–≥–∞: ${formData.service}\n`;
        }
        
        if (formType === 'modal' && formData.comment) {
            messageText += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.comment}\n`;
        }
        
        messageText += `\nüìÜ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;
        
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: messageText,
                parse_mode: 'HTML'
            })
        });
        
        const data = await response.json();
        return data.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
};
